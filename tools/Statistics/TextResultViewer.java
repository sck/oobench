import java.util.*;

public class TextResultViewer extends ResultViewer {

    public TextResultViewer(String aProgramName, String[] someArgs, 
            ResultModel aModel, AnnotationModel anAnnModel, 
            ErrorLogger aLogger) {
        programName = aProgramName;
        args = someArgs;
        model = aModel;
        annModel = anAnnModel;
        logger = aLogger;
    }

    public void showCommandLine() {
        String[] args = getArgs();
        System.out.println("#\n# Output generated by OO Bench's statistics " + 
                "program.\n" +
                "# See http://oobench.sourceforge.net/ for more " + 
                "information\n" +
                "# about OO Bench."); 
        System.out.print("#\n# Command was: " + getProgramName());
        for (int i = 0; i < args.length; i++) {
            System.out.print(" " + args[i]);
        }
        System.out.println("\n#");
    }

    public void showAveragesForSection(String section) {
        List totals = model.getSortedSectionAverages(section);
        if (totals != null) {
            ResultModel model = getModel();
            System.out.println("Average performance for this section " + 
                    "(if comparison was available):");
            System.out.println("-------------------------------------" + 
                    "------------------------------");
            Iterator totalsIter = totals.iterator();
            while (totalsIter.hasNext()) {
                List result = (List)totalsIter.next();
                System.out.println("  " + (String)result.get(0) + 
                        ":\t" + (Integer)result.get(1) + "%");
            }
            System.out.println();
        }
    }

    public void showLocationsForMinorSection(String section) {
        List locations = model.getLocationsForMinorSection(section);
        if (locations != null) {
            Iterator locIter = locations.iterator();
            System.out.println("% Locations:");
            while (locIter.hasNext()) {
                List result = (List)locIter.next();
                System.out.println("% " + (String)result.get(0) + 
                        ":\t" + (String)result.get(1));
            }
            System.out.println();
        }
    }

    public void showResult() {
        showCommandLine();
        System.out.println("# Note: Performance is measured only by the " + 
                "speed of execution.");
        System.out.println("#       Estimated times are not included in " +
                "statistics as well.");
        System.out.println("===========================================" + 
                "==============================");
        System.out.println("Total average performance " + 
                "(if comparison was available):");
        ResultModel model = getModel();
        AnnotationModel annModel = getAnnModel();
        List totals = model.getSortedTotals();
        Iterator totalsIter = totals.iterator();
        while (totalsIter.hasNext()) {
            List result = (List)totalsIter.next();
            System.out.println("  " + (String)result.get(0) + 
                    ":\t" + (Integer)result.get(1) + "%");
        }
        System.out.println("===========================================" + 
                "==============================");

        List ids = model.getIDs();
        Iterator iter = model.getIDs().iterator();
        Integer currentMajorNumber = new Integer(0);
        Integer currentMinorNumber = new Integer(0);
        String minorAnnotation = "";

        while (iter.hasNext()) {
            ID id = (ID)iter.next();
            IDResults idResults = model.getResultsForID(id);
            List results = idResults.getResultsSortedByTime();

            if (!currentMajorNumber.equals(id.getMajorNumber())) {
                currentMajorNumber = id.getMajorNumber();
                currentMinorNumber = new Integer(0);
                System.out.println("[" + currentMajorNumber + "    ] " +
                        annModel.getAnnotationForID(
                        currentMajorNumber.toString()));
                showAveragesForSection(currentMajorNumber.toString());
            }

            if (!currentMinorNumber.equals(id.getMinorNumber())) {
                currentMinorNumber = id.getMinorNumber();
                minorAnnotation = annModel.getAnnotationForID(
                        currentMajorNumber.toString() + "." + 
                        currentMinorNumber.toString());
                String sectionString =  currentMajorNumber + "." + 
                        currentMinorNumber;
                System.out.println("[" + sectionString + "  ] " + 
                        minorAnnotation);
                showAveragesForSection(sectionString);
                showLocationsForMinorSection(sectionString);
            }

            System.out.println("[" + id + "] " +
                    minorAnnotation + ": " + 
                    idResults.getAnnotation() + " (" +
                    idResults.getRepetitions() + ")");
            Iterator resultsIter = results.iterator();
            while (resultsIter.hasNext()) {
                IDResultItem result = (IDResultItem)resultsIter.next();
                String comment = result.getComment();
                Integer percent = new Integer(result.getPercentRatio());
                String percentValue =  percent.toString();
                String padding = (percentValue.length() < 5 ? 
                        "     ".substring(0, 5 - percentValue.length()) : "");
                String language = result.getLanguage();

                System.out.println("  " + percentValue + "%" + 
                        padding + language + ":\t" + 
                        result.getMilliSeconds() + ", " + 
                        result.getMemoryUsed() + 
                        (!comment.equals("") ? " -- " + comment : ""));
            }

            if (!idResults.haveComparison()) {
                System.out.println("  -> No comparison, results not included" +
                        " in statistics.");
            }
            System.out.println();
        }
    }
}
